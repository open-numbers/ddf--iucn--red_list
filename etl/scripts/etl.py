import pandas as pd
import os
import re

from collections import defaultdict
from ddf_utils.io import cleanup, dump_json
from ddf_utils.str import to_concept_id
from ddf_utils.package import get_datapackage

dirname = os.path.dirname(__file__)
inputFolder = os.path.join(dirname, '..', 'source')
outputFolder = os.path.join(dirname, '..' , '..')

""" util functions """

concept_types = defaultdict(lambda: 'string', {
    'species': 'entity_domain',
    'assessment': 'entity_domain'
})
def extractConcepts(df, concepts):
    newConcepts = pd.DataFrame(index=getIndexAndColNames(df))
    newConcepts['concept_type'] = newConcepts.index.map(concept_types)
    concepts = concepts.append(newConcepts)
    concepts = removeDuplicatesByIndex(concepts)
    return concepts
    
def removeDuplicatesByIndex(df, keep='first'):
    return df.loc[~df.index.duplicated(keep=keep)]

def getIndexAndColNames(df):
    indexNames = list(filter(None,df.index.names))
    return indexNames + df.columns.tolist()

pattern = re.compile(r'(?<!^)(?=[A-Z])')
def camelToSnake(str):
    return pattern.sub('_', str).lower()

def conceptID(str):
    return to_concept_id(camelToSnake(str))

# filter for species we're interested in for igno questions
def filterSpecies(df):
    speciesids = pd.Series(name='species', data=[41230,110164784,195409,169241,136820,22731646,22733110,174469,22732871,45353580,22724836,177543,1920,196586,10235,136913,22700393,42680235,42681112,42683517,42685,63175,54544,18477,64409,103890794,178396,16084399,60844,163534,15038381,7859,16084509,9021,29473,136397,22735423,22694875,4137,22698957,136433,136552,136777,22679678,136563,22693785,22698375,22679954,170379,59854,45449328,60007,59450,56600,56709,56982,57439,136474,6279,18447,22720676,10137,11521,12272,12902,14922,16737,17315,17602,18150,18750,21151,136192,136340,136410,22692340,22708955,22709004,3023,42841,7860,22208,41567,41584,135968,155285,39260,22721839,22713436,63222,64401,64412,63400,60365,60748,60124,22698350,56597,22714078,61064,61066,61092,61119,61140,61147,60266,61060,61069,61118,61142,61164,178660,64867077,14608,42686,15517,15519,169200,169207,169250,2478,10131,45052,59374,59378,22685593,178579,22678795,22700900,22702334,22716655,22728354,5812,14816,18769,56912,59191,16896334,17046297,17046324,17181617,60570,22698393,42845,56787,16895402,16895612,16896309,17046320,17181748,17182043,22690122,22710177,22690392,22697949,22700764,22682824,22721297,22691794,22688449,41229,19679,60289,176250,178335,178462,61357,178276,22683582,22696756,59910,22713779,2562,15967,59849,22724488,22728437,11254,167634,22724553,68336601,11304,17003,56841,55280,22691699,22728303,20297,41694,22723301,3591,8997,13931,136659,22697975,2176,22686296,3897,22686288,22735037,7959,22701364,22685516,22724754,15315,4230,169255,10589,22714018,7958,7960,22724703,3012,22707172,16926,22696042,22724268,19708,61382025,14136,22714226,942,20293,22684581,22697797,20290,59383,59396,14053,18336,21119,21662,22701,22708735,15523,21177,22681095,21466,6608,4807,5340,11171,16569,18102,19954,22686037,22698365,22703240,22735664,6975,3989,18478,1541,2417,6316,6317,15361,16069,9312,10642,15089,16722,18149,22678815,22679057,22685185,22702514,5333,22678108,22690226,8239,4245,5760,16218,19683,22679869,22687813,11691,11693,13160,22714874,6335,11201,19709,23042,60579,68527310,22689452,315,2427,2581,23030,59848,63290,22690991,22716552,20342,20345,22719744,4983,7926,16129,712,22681914,22703336,22731107,4261,22697852,22732,1681,5839,7013,18736,22678114,22692311,22724382,5862,22689038,22699659,22703252,22716864,22720940,59755,59699,22728328,6267,6772,8162,10600,12891,13159,17828,21157,13603,22297,2110,13883,18707,22706957,13887,18503,18504,19381,22678395,22682186,22698964,22701188,22701533,22702588,22702591,22720246,9136,11137,13563,59707,22679054,22723024,22685399,13579,15125,21183,22678357,22685072,22713737,18768,12416,15126,18848,20474,20743,22688493,22713069,2784,6294,22697599,22708745,22719543,14026,561,7963,39594,41787,8967,11979,22710531,14098,22680762,59734,12265,12652,22705203,1789,6300,14361,22682926,22698777,7720,23079,22696592,562,1921,9313,22733,22707200,22719739,15569,22703602,22706151,22723198,3572,22681293,22686158,22693876,22694286,22722900,15330,2153,7671,10979,13882,17600,19529,19589,21317,21458,44787,44788,44789,44799,12796,15975,17348,19710,22685919,22686054,22686125,22722567,22722823,11522,22680556,22695699,15409,19378,22678843,22702878,2574,22704731,22685035,22682744,22696357,22702344,22706626,22717481,11933,22707393,3549,20340,22728596,22681158,63292,843,1264,3604,4810,8385,9245,10635,10749,13119,13209,14027,14118,14129,15793,16850,16899,17474,17572,19999,21156,21162,21987,2553,6299,6301,7932,14123,17487,19516,20475,22688090,22694299,22715628,22707741,10083,44851,22706183,22714882,22719673,15648,22683347,22713250,18549,6223,6801,14105,15052,16104,16852,22698648,14127,22690609,22713724,22684908,22708496,22691874,22704125,22708973,22719159,22699453,14288,22694313,22701520,16210,16467,19518,22679050,22703671,22715480,22719155,22697728,14485,22679398,22694436,22698277,22698335,22707078,22709211,22722890,22723399,22723403,22724229,22724673,22731912,13006,22680317,22699031,22707901,22690312,22693811,22721722,22207,22692543,22686419,7907,8755,22679325,22697604,22709650,22722985,22680759,22685606,22698246,22701524,13443,11519,14019,14879,22703838,9561,22680560,14563,21209,22688911,22703292,22705159,22705672,22705675,22717510,22718611,22719703,22678129,22716252,22709376,22704697,15548,22838,22703976,22679576,22690281,22692486,22713976,22717516,22679063,22681360,22683291,22684257,22685360,22686168,22686251,22687627,22688257,22688359,22689002,22691024,22691744,22695553,22696275,22696977,22701847,22704944,22709177,22709386,22710101,22713021,22716018,22716480,22722621,22723468,22724150,25390,17598,22690112,2613,2963,22679330,22679372,22713500,7821,22685710,22686311,22699497,22700862,22701592,22702639,22714454,22723185,22687998,22705330,22685009,22702527,22714267,22723904,22679274,22690117,22699423,8153,22703001,22704510,4148,7667,8548,10057,10074,10089,10122,10151,14958,20317,10082,19800,22709394,1916,1917,5228,8978,19863,21328,39910,22680373,22686543,22705888,22706489,22711341,2467,22684132,22713949,22713801,22682522,22715885,22680412,22694641,22695010,22711219,22679287,22682857,22683310,22684559,22684573,22684954,22684960,22688602,22688614,22688718,22689398,22699433,22702500,22705251,22707760,22709117,22709187,22712613,22716227,22716232,22716243,22721929,22695137,22696734,22956,22685214,22681478,22704751,22710619,22711192,22714523,22716112,14604,59742,22718743,22678172,22679292,22682961,22683024,22684749,22685081,22687078,22688608,22689389,22691585,22691754,22692946,22697398,22702530,22703203,22704644,22705858,22706218,22708033,22709389,22713039,22713788,22713919,22716248,22716767,22719716,22700705,22706575,22707224,22722976,22679836,22679984,22685001,22685145,22686447,22690046,22698625,22702566,22703403,22703657,22703760,22703780,22705473,22709382,22711591,22714110,22715801,22716832,22716853,22718606])
    df = df[df.species.isin(speciesids)]
    # print missing values (if igno question id's are invalid)
    notPresent = speciesids[~speciesids.isin(df.species)]
    print(notPresent)
    return df

def processEntityDomain(filePath, conceptDict={}, dropCols=[]):
    df = pd.read_csv(filePath, encoding='utf8')
    df = df.drop(columns=dropCols)
    df = df.rename(columns=conceptDict)
    df = df.rename(columns=conceptID)
    return df
""" ETL process """

cleanup(outputFolder)

concepts = pd.DataFrame()

# species entity domain
inputFile = os.path.join(inputFolder, 'bulk', 'taxonomy.csv')
outputFile = os.path.join(outputFolder, 'ddf--entities--species.csv')
df = processEntityDomain(inputFile, conceptDict={ 'internalTaxonId': 'species' })
df.to_csv(outputFile, index=False, encoding='utf8')
concepts = extractConcepts(df, concepts)

# assessment entity domain
inputFile = os.path.join(inputFolder, 'bulk', 'assessments.csv')
outputFile = os.path.join(outputFolder, 'ddf--entities--assessment.csv')
df = processEntityDomain(inputFile, 
    conceptDict = { 'internalTaxonId': 'species', 'assessmentId': 'assessment'},
    dropCols = ['scientificName']
)
# df = filterSpecies(df)
df.to_csv(outputFile, index=False, encoding='utf8')
concepts = extractConcepts(df, concepts)

# concepts
outputFile = os.path.join(outputFolder, 'ddf--concepts.csv')
concepts = concepts.rename_axis('concept')
concepts.to_csv(outputFile, index=True, encoding='utf8')

# datapackage
dump_json(os.path.join(outputFolder, 'datapackage.json'), get_datapackage(outputFolder, update=True))

